package my.emailclient;

import com.sun.mail.imap.IMAPFolder;

import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.*;
import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

import java.awt.Color;
import java.awt.Frame;
import java.awt.SystemColor;
import java.awt.Dimension;
import java.awt.event.*;

/**
 * @author dxj452
 * The main panel that contains text boxes that are used to display email subjects
 * and their content. Also has button for searching emails, sending emails, 
 * and adding custom flags
 */
public class ClientJPanel extends javax.swing.JPanel {

	private static final long serialVersionUID = 1L;
	private IMAPFolder folder;
    private DefaultListModel<String> listModel;
    private String[] subjects = null;
    private JTextArea txtEmail;
    private Frame frameEmail;
    private Flags customFlag;
    private String strFilterWords;
    
    /**
     * Creates new form EmailJPanel
     */
    public ClientJPanel(IMAPFolder folder, Frame frameEmail) {
    	setBackground(SystemColor.activeCaption);
        this.folder = folder;
        this.frameEmail = frameEmail;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        pnlMenu = new javax.swing.JPanel();
        pnlMenu.setBounds(918, 0, 200, 202);
        pnlMenu.setBackground(SystemColor.activeCaption);
        pnlMenu.setForeground(new Color(0, 0, 0));
        lblMenu = new javax.swing.JLabel();
        lblMenu.setBackground(SystemColor.activeCaption);
        btnDisplaySubjects = new javax.swing.JButton();
        btnDisplaySubjects.setBackground(new Color(248, 248, 255));
        btnDisplaySubjects.setText("Display Email Subjects");

        setPreferredSize(new Dimension(1131, 800));

        pnlMenu.setToolTipText("");

        lblMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenu.setLabelFor(pnlMenu);
        lblMenu.setText("Menu");
        lblMenu.setToolTipText("");
        btnDisplaySubjects.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
					displaySubjects();
				} catch (MessagingException | IOException e) {
					throw new RuntimeException(e);
				}
            }
        });
        
        JButton btnEmailContent = new JButton();
        btnEmailContent.setText("Content of Selected Email");
        btnEmailContent.setBackground(new Color(248, 248, 255));
        btnEmailContent.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
        			displayEmailContent();
				} catch (MessagingException | IOException e1) {
					throw new RuntimeException(e1);
				}
        	}
        });

        
        JButton btnEmail = new JButton();
        btnEmail.setText("Compose New Email");
        btnEmail.setBackground(new Color(248, 248, 255));
        btnEmail.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		openEmailJPanel();
        	}

			private void openEmailJPanel() {
				frameEmail.setVisible(true);
			}
        });
        
        JButton btnSearch = new JButton();
        btnSearch.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		String strSearch = JOptionPane.showInputDialog(null, "Search For: ", "Search For: ",JOptionPane.QUESTION_MESSAGE);
        		if (strSearch != null) {
	        		try {
						searchEmails(strSearch);
					} catch (IOException | MessagingException e) {
						throw new RuntimeException(e);
					}
        		}
        	}
        });
        btnSearch.setText("Search Emails");
        btnSearch.setBackground(new Color(248, 248, 255));
        
        JButton btnChangeFlag = new JButton();
        btnChangeFlag.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		try {
					changeFlagOfSelectedMessage();
				} catch (MessagingException | IOException e) {
					throw new RuntimeException(e);
				}
        	}
        });
        btnChangeFlag.setToolTipText("If the email is Read it will change it to Unread and vice-versa");
        btnChangeFlag.setText("Change to Read/Unread");
        btnChangeFlag.setBackground(new Color(248, 248, 255));
        
        
        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenuLayout.setHorizontalGroup(
        	pnlMenuLayout.createParallelGroup(Alignment.LEADING)
        		.addComponent(lblMenu, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
        		.addComponent(btnDisplaySubjects, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
        		.addComponent(btnEmailContent, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
        		.addGroup(pnlMenuLayout.createSequentialGroup()
        			.addComponent(btnEmail, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        		.addGroup(pnlMenuLayout.createSequentialGroup()
        			.addComponent(btnSearch, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        		.addGroup(pnlMenuLayout.createSequentialGroup()
        			.addComponent(btnChangeFlag, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        );
        pnlMenuLayout.setVerticalGroup(
        	pnlMenuLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(pnlMenuLayout.createSequentialGroup()
        			.addComponent(lblMenu)
        			.addGap(18)
        			.addComponent(btnDisplaySubjects, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnEmailContent)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnEmail)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnSearch)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnChangeFlag)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMenu.setLayout(pnlMenuLayout);
           
        listModel = new DefaultListModel<String>();
        setLayout(null);
        
        scrollPaneListEmails = new JScrollPane();
        scrollPaneListEmails.setBounds(10, 11, 898, 119);
        add(scrollPaneListEmails);
        listEmails = new JList<String>(listModel);
        scrollPaneListEmails.setViewportView(listEmails);
        listEmails.setValueIsAdjusting(true);
        listEmails.setVisibleRowCount(100);
        listEmails.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        scrollPaneTxtEmail = new JScrollPane();
        scrollPaneTxtEmail.setBounds(10, 142, 898, 646);
        add(scrollPaneTxtEmail);
        
        txtEmail = new JTextArea();
        txtEmail.setEditable(false);
        scrollPaneTxtEmail.setViewportView(txtEmail);
        add(pnlMenu);
        
        JPanel panel = new JPanel();
        panel.setToolTipText("");
        panel.setForeground(Color.BLACK);
        panel.setBackground(SystemColor.activeCaption);
        panel.setBounds(920, 204, 200, 171);
        add(panel);
        
        JLabel lblEmailFilter = new JLabel();
        lblEmailFilter.setToolTipText("");
        lblEmailFilter.setText("Email Filter");
        lblEmailFilter.setHorizontalAlignment(SwingConstants.CENTER);
        lblEmailFilter.setBackground(SystemColor.activeCaption);
        
        JButton btnFilter = new JButton();
        btnFilter.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
					emailFilter();
				} catch (MessagingException | IOException e1) {
					throw new RuntimeException(e1);
				}
        	}
        });
        btnFilter.setText("Filter Emails");
        btnFilter.setBackground(new Color(248, 248, 255));
        
        txtFilterWords = new JTextField();
        txtFilterWords.setColumns(10);
        
        JLabel lblFilterWords = new JLabel();
        lblFilterWords.setToolTipText("");
        lblFilterWords.setText("Filter Words:");
        lblFilterWords.setHorizontalAlignment(SwingConstants.CENTER);
        lblFilterWords.setBackground(SystemColor.activeCaption);
        
        JLabel lblFilterFlag = new JLabel();
        lblFilterFlag.setText("Flag Name:");
        lblFilterFlag.setToolTipText("");
        lblFilterFlag.setHorizontalAlignment(SwingConstants.CENTER);
        lblFilterFlag.setBackground(SystemColor.activeCaption);
        
        txtFilterFlag = new JTextField();
        txtFilterFlag.setColumns(10);
        
        JButton btnClearFlags = new JButton();
        btnClearFlags.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		try {
					removeUserFlags();
				} catch (MessagingException | IOException e) {
					throw new RuntimeException(e);
				}
        	}
        });
        btnClearFlags.setText("Clear Flags");
        btnClearFlags.setBackground(new Color(248, 248, 255));
        GroupLayout gl_panel = new GroupLayout(panel);
        gl_panel.setHorizontalGroup(
        	gl_panel.createParallelGroup(Alignment.LEADING)
        		.addComponent(lblEmailFilter, GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        		.addGroup(gl_panel.createSequentialGroup()
        			.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
        				.addComponent(btnFilter, GroupLayout.PREFERRED_SIZE, 197, GroupLayout.PREFERRED_SIZE)
        				.addGroup(gl_panel.createSequentialGroup()
        					.addContainerGap()
        					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING, false)
        						.addGroup(gl_panel.createSequentialGroup()
        							.addComponent(lblFilterWords)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(txtFilterWords, 0, 0, Short.MAX_VALUE))
        						.addGroup(gl_panel.createSequentialGroup()
        							.addComponent(lblFilterFlag, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(txtFilterFlag, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)))))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        		.addGroup(gl_panel.createSequentialGroup()
        			.addComponent(btnClearFlags, GroupLayout.PREFERRED_SIZE, 197, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        );
        gl_panel.setVerticalGroup(
        	gl_panel.createParallelGroup(Alignment.LEADING)
        		.addGroup(gl_panel.createSequentialGroup()
        			.addComponent(lblEmailFilter)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(gl_panel.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblFilterWords)
        				.addComponent(txtFilterWords, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(gl_panel.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblFilterFlag)
        				.addComponent(txtFilterFlag, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(btnFilter, GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnClearFlags, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
        			.addGap(33))
        );
        panel.setLayout(gl_panel);

        pnlMenu.getAccessibleContext().setAccessibleName("");
    }

    
	/**
	 * displays the subjects in the list model
	 * @throws IOException
	 * @throws MessagingException
	 */
	private void displaySubjects() throws IOException, MessagingException {
        Emails emails = new Emails(folder);
        subjects = emails.getSubjects();
        listModel.clear();
        for (int i = 0; i < subjects.length; i++) {
        	String subject = subjects[i];
        	Flags messageFlags = emails.getFlags(i);
        	listModel.addElement(modifySubjectName(i, messageFlags, subject));
        }
	}
	
	/**
	 * @param i the index number of the message
	 * @param messageFlags the flags of the message
	 * @param subject the subject of the message
	 * @return a string that is a concatenation of the parameters
	 */
	private String modifySubjectName(int i, Flags messageFlags, String subject) {
		return (i+1) + ") " + flagsToStr(messageFlags) + "Subject: " + subject;
	}
	
	/**
	 * creates a string from the message's flag
	 * @param messageFlags the flags of a message 
	 * @return a string from the message's flags
	 */
	private String flagsToStr(Flags messageFlags) {
		String strFlags = "";
		if (!messageFlags.contains(Flags.Flag.SEEN))
			strFlags += "Unread:";
		String[] flags = messageFlags.getUserFlags();
		for (String flag: flags) {
			strFlags += flag + ":";
		}
		return strFlags;
	}
	
	/**
	 * changes the SEEN flag value for the message selected in the
	 * jList GUI component
	 * @throws MessagingException
	 * @throws IOException 
	 */
	private void changeFlagOfSelectedMessage() throws MessagingException, IOException {
		Message message = getSelectedMessage();
		Boolean bool = true;
		if (message.getFlags().contains(Flags.Flag.SEEN))
			bool = false;
		message.setFlag(Flags.Flag.SEEN, bool);
		displaySubjects();
	}
	
	/**
	 * @return the message that is selected in the jList that displays email subjects
	 * @throws MessagingException
	 */
	private Message getSelectedMessage() throws MessagingException {
    	Emails emails = new Emails(folder);
    	Message[] messages = emails.getMessages();
    	
    	//get index for messages
    	String messageTitle = listEmails.getSelectedValue();
    	Pattern p = Pattern.compile("(\\d+)");
        Matcher m = p.matcher(messageTitle);
        Integer messageIndex = -1;
        if (m.find()) {
        	messageIndex = Integer.valueOf(m.group(1)) -1;
        }
    	if (messageIndex == -1) 
    		return null;
    	return messages[messageIndex];
	}
	
    /**
     * displays the emailcontent of the selected email
     * @throws MessagingException
     * @throws IOException
     */
    private void displayEmailContent() throws MessagingException, IOException {
    	Message message = getSelectedMessage();
    	txtEmail.setText("");
    	if(message.getContentType().contains("TEXT/PLAIN")) { //message.getContent() instanceof String
    		txtEmail.setText(message.getContent().toString());
    	} else {
    		Multipart multipart = (Multipart) message.getContent();
    		for (int x = 0; x < multipart.getCount(); x++) {
    			BodyPart bodyPart = multipart.getBodyPart(x);
    			if(bodyPart.getContentType().contains("TEXT/PLAIN")) { //bodyPart.getContent() instanceof String
    				txtEmail.setText(txtEmail.getText() + bodyPart.getContent().toString());
    			}
    		}
		}
    }

    /**
     * Searches emails and only displays them if they contain a string specified by user
     * @param strSearch the string that is used for searching
     * @throws IOException
     * @throws MessagingException
     */
    private void searchEmails(String strSearch) throws IOException, MessagingException {
		Emails emails = new Emails(folder);
		final String[] emailsContent = getEmailsContent();
		
		listModel.clear();
		int count = 0;
		for (String emailContent : emailsContent) {
			if (emailContent.contains(strSearch)) {
	        	String subject = emails.getSubjects()[count];
	        	Flags messageFlags = emails.getFlags(count);
				listModel.addElement(modifySubjectName(count, messageFlags, subject));
			}
			count++;
		}
	}

	/**
	 * @return an array of strings of email contents
	 * @throws MessagingException
	 * @throws IOException
	 */
	private String[] getEmailsContent() throws MessagingException, IOException {
		Emails emails = new Emails(folder);
    	Message[] messages = emails.getMessages();
    	String[] emailSubjects = emails.getSubjects();
    	String[] emailTexts = new String[messages.length];
    	int count = 0;
    	for(Message message : messages) {
    		Boolean seenFlagValue = message.getFlags().contains(Flags.Flag.SEEN);
    		emailTexts[count] = emailSubjects[count] + " ";
	    	if(message.getContentType().contains("TEXT/PLAIN")) {
	    		emailTexts[count] = emailTexts[count] + message.getContent().toString();
	    	} else {
	    		Multipart multipart = (Multipart) message.getContent();
	    		for (int x = 0; x < multipart.getCount(); x++) {
	    			BodyPart bodyPart = multipart.getBodyPart(x);
	    			if(bodyPart.getContentType().contains("TEXT/PLAIN")) {
	    				emailTexts[count] = emailTexts[count] + bodyPart.getContent().toString();
	    			}
	    		}
			}
	    	message.setFlag(Flags.Flag.SEEN, seenFlagValue);
	    	count++;
    	}
		return emailTexts;
	}
	
	/**
	 * filters emails by adding custom flags
	 * @throws MessagingException
	 * @throws IOException
	 */
	private void emailFilter() throws MessagingException, IOException {
		strFilterWords = txtFilterWords.getText();
		customFlag = new Flags(txtFilterFlag.getText());
		filterEmails(strFilterWords, customFlag);
		displaySubjects();
	}
	
	/**
	 * adds a custom flag if message contains string specified by user 
	 * @param strSearch
	 * @param customFlag
	 * @throws IOException
	 * @throws MessagingException
	 */
	private void filterEmails(String strSearch, Flags customFlag) throws IOException, MessagingException {
		Emails emails = new Emails(folder);
		String[] emailsContent = null;
		Message[] messages = emails.getMessages();
		emailsContent = getEmailsContent();

		
		listModel.clear();
		
		int count = 0;
		for (String emailContent : emailsContent) {
			if (emailContent.contains(strSearch)) {
	        	messages[count].setFlags(customFlag, true);
			}
			count++;
		}
	}
	
	/**
	 * removes flags that were created by the user from all messages in folder
	 * @throws MessagingException
	 * @throws IOException
	 */
	private void removeUserFlags() throws MessagingException, IOException {
		Emails emails = new Emails(folder);
		Message[] messages = emails.getMessages();
		for (Message message : messages) {
			String[] userFlags = message.getFlags().getUserFlags();
			for (String userFlag : userFlags) {
				message.setFlags(new Flags(userFlag), false);
			}
		}
		displaySubjects();
	}

    private javax.swing.JButton btnDisplaySubjects;
    private javax.swing.JLabel lblMenu;
    private javax.swing.JPanel pnlMenu;
    private JList<String> listEmails;
    private JScrollPane scrollPaneListEmails;
    private JScrollPane scrollPaneTxtEmail;
    private JTextField txtFilterWords;
    private JTextField txtFilterFlag;
}
